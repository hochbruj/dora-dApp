{"version":3,"sources":["utils/getWeb3.js","components/new_question.js","components/answer.js","components/question_item.js","components/question_list.js","components/home.js","components/answer_item.js","components/my_answer_list.js","components/pick_winner.js","components/my_question_item.js","components/my_question_list..js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","NewQuestion","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","postQuestion","value","Math","round","utils","toWei","state","reward","setState","loading","contract","createDora","question","from","accounts","setPage","_this2","react_default","createElement","Modal","trigger","Button","primary","Header","Content","Description","Form","TextArea","label","placeholder","onChange","event","target","Input","type","Message","warning","toFixed","Actions","color","onClick","Component","Answer","submit","postAnswer","answer","modalOpen","handleOpen","QuestionItem","componentDidMount","DoraContract","deadline","truffleContract","Dora","setProvider","currentProvider","at","sent","getSummary","Date","now","Card","components_answer","bind","toString","error","fluid","Meta","parseFloat","fromWei","renderAnswer","renderMessage","QuestionList","getPastEvents","fromBlock","toBlock","sort","b","blockNumber","questions","map","item","question_item","key","returnValues","dora","length","Divider","Group","Home","new_question","question_list","AnswerItem","answers","answerIndex","redeem","_callee2","_context2","withdrawReward","location","reload","toNumber","success","renderRedeem","MyAnswerList","_isMounted","updateLog","componentDidUpdate","_callee3","_context3","filter","answerer","Segment","answer_item","transactionHash","index","PickWinner","pickWinner","MyQuestionItem","all","Array","parseInt","fill","element","withdrawDepositReward","pick_winner","disabled","Table","Row","Cell","collapsing","renderCell","Body","renderRows","extra","MyQuestionList","asker","my_question_item","App","storageValue","activeItem","handleItemClick","e","_ref","name","Contract","instance","eth","getAccounts","DoraFactory","deployed","setEventMonitors","alert","on","changeAccount","home","my_answer_list","my_question_list_","className","Container","rel","href","Menu","Item","active","position","renderPage","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23500814.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:9545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from 'react';\r\nimport { Button, Modal, Form, Message } from 'semantic-ui-react'\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { question: '', reward: '', loading: false };\r\n    }\r\n    render() {\r\n        return (\r\n                <Modal\r\n                    trigger={<Button primary>Ask Question</Button>}>\r\n                    <Modal.Header>What do you want to know?</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <Form>\r\n                                <Form.TextArea\r\n                                    label='Question'\r\n                                    placeholder='Keep your question short and to the point'\r\n                                    onChange={event => this.setState({ question: event.target.value })} />\r\n                                <Form.Input\r\n                                    type='number'\r\n                                    placeholder='Enter reward for best answer'\r\n                                    label=\"Reward in Ether\"\r\n                                    onChange={event => this.setState({ reward: event.target.value })} />\r\n                            </Form>\r\n                        </Modal.Description>\r\n                        {this.state.reward &&\r\n                            <Message warning>\r\n                                <Message.Header>\r\n                                    <li>Deposit (returned when you pick best answer): {(this.state.reward * 0.1).toFixed(4)} Ether</li>\r\n                                    <li>Total payment: {(this.state.reward * 1.1).toFixed(4)} Ether</li>\r\n                                    </Message.Header>\r\n                            </Message>\r\n                        }\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button loading={!!this.state.loading} color='green' onClick={this.postQuestion}>Add Question</Button>\r\n                    </Modal.Actions>\r\n\r\n                </Modal>\r\n        );\r\n    }\r\n\r\n    postQuestion = async () => {\r\n        try {\r\n            const value = Math.round((this.props.web3.utils.toWei(this.state.reward, 'ether') * 1.1))\r\n            this.setState({ loading: true})\r\n            await this.props.contract.createDora(this.state.question,\r\n                {\r\n                    from: this.props.accounts[0],\r\n                    value: value\r\n                })\r\n            this.setState({ loading: false})\r\n            this.props.setPage('myQuestions')\r\n //           window.location.reload()\r\n        } catch (err) {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        }\r\n          \r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default NewQuestion;","import React, { Component } from 'react';\r\nimport { Button, Modal, Form } from 'semantic-ui-react'\r\n\r\nclass Answer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { answer: '', loading: false };\r\n    }\r\n    render() {\r\n        return ( \r\n                <Modal\r\n                    trigger={<Button color='green' onClick={this.handleOpen}>Post Answer</Button>}\r\n                >\r\n                    <Modal.Header>{this.props.question}</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <Form>\r\n                                <Form.TextArea\r\n                                    label='Your answer'\r\n                                    placeholder='Provide a detailed answer...'\r\n                                    onChange={event => this.setState({ answer: event.target.value })} />\r\n                            </Form>\r\n                        </Modal.Description>\r\n                        \r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button loading={!!this.state.loading} color='green' onClick={this.submit}>Submit Answer</Button>\r\n                    </Modal.Actions>\r\n\r\n                </Modal>\r\n        );\r\n    }\r\n\r\n\r\n    submit = async () => {\r\n        try {\r\n            this.setState({ loading: true})\r\n            await this.props.contract.postAnswer(this.state.answer,\r\n                {\r\n                    from: this.props.accounts[0],\r\n                })\r\n\r\n            this.setState({ modalOpen: false, loading: false })\r\n            this.props.setPage('myAnswers')\r\n        } catch (err) {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react';\r\nimport { Card, Message } from 'semantic-ui-react'\r\nimport Dora from '../contracts/Dora'\r\nimport truffleContract from \"truffle-contract\";\r\nimport Answer from './answer'\r\n\r\nclass QuestionItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { question: null, contract: null, deadline: null };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        const DoraContract = truffleContract(Dora)\r\n        DoraContract.setProvider(this.props.web3.currentProvider)\r\n        const contract = await DoraContract.at(this.props.contract)\r\n        const question = await contract.getSummary()\r\n        const deadline = new Date(question[2] * 1000)\r\n        this.setState({ question, contract, deadline })\r\n     \r\n      }\r\n    \r\n    renderAnswer() {\r\n        if (this.state.deadline > Date.now()) {\r\n            return (\r\n                <Card.Content>\r\n                <Answer\r\n                    web3={this.props.web3}\r\n                    contract={this.state.contract}\r\n                    accounts={this.props.accounts}\r\n                    question={this.state.question[0]}\r\n                    setPage={this.props.setPage.bind(this)}/>  \r\n                </Card.Content>  \r\n            )\r\n        }\r\n    }\r\n\r\n    renderMessage() {\r\n        if (this.state.deadline > Date.now()) {\r\n            return (\r\n                <Card.Content>\r\n                    <Message warning>To be answered by {this.state.deadline.toString()}</Message>\r\n                </Card.Content>\r\n            )\r\n        } else {\r\n            return (\r\n                <Card.Content>\r\n                    <Message error>The deadline for answer submission has been expired.</Message>\r\n                </Card.Content>\r\n            )\r\n        }\r\n    }\r\n\r\n  \r\n    \r\n    render() {\r\n        if (!this.state.question) {\r\n            return <div>Loading question...</div>;\r\n          }\r\n        \r\n        return (\r\n                <Card fluid>\r\n                    <Card.Content>\r\n                    <Card.Header>{this.state.question[0]}</Card.Header>\r\n                    <Card.Meta>Reward: {parseFloat(this.props.web3.utils.fromWei(this.state.question[1].toString(), 'Ether'))\r\n                                .toFixed(2)} Ether</Card.Meta>\r\n                    </Card.Content>\r\n                   {this.renderAnswer()}\r\n                   {this.renderMessage()}                 \r\n                </Card>  \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default QuestionItem;","import React, { Component } from 'react';\r\nimport { Divider, Card } from 'semantic-ui-react'\r\nimport QuestionItem from './question_item'\r\n\r\nclass QuestionList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { log: null };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        var log = await this.props.contract.getPastEvents('QuestionAsked',\r\n            { fromBlock: 0,\r\n               toBlock: 'latest'\r\n            })\r\n        \r\n        log.sort((a,b) => b.blockNumber - a.blockNumber);\r\n\r\n        this.setState({ log })\r\n     \r\n      }\r\n\r\n    \r\n    render() {\r\n        if (!this.state.log) {\r\n            return <div>Loading questions...</div>;\r\n          }\r\n\r\n        const questions = this.state.log.map((item) => {\r\n            return (\r\n            <QuestionItem\r\n                key={item.returnValues.dora}\r\n                contract={item.returnValues.dora}\r\n                web3={this.props.web3}\r\n                accounts={this.props.accounts}\r\n                setPage={this.props.setPage.bind(this)}\r\n             />\r\n            );\r\n        })\r\n\r\n        if (questions.length > 0) {\r\n\r\n        return (\r\n            <div><Divider/>\r\n            <h2>Questions asked by other users</h2>\r\n            <Card.Group>{questions}</Card.Group></div>    \r\n        )\r\n        }\r\n\r\n        else {\r\n            return <div><Divider/></div>              \r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default QuestionList;","import React, { Component } from 'react';\r\nimport NewQuestion from './new_question'\r\nimport QuestionList from './question_list'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Dora - The decentralized Quora on Ethereum</h1>\r\n            <NewQuestion\r\n                web3={this.props.web3}\r\n                accounts={this.props.accounts}\r\n                contract={this.props.contract}\r\n                setPage={this.props.setPage.bind(this)}\r\n            />\r\n            <QuestionList\r\n                web3={this.props.web3}\r\n                accounts={this.props.accounts}\r\n                contract={this.props.contract}\r\n                setPage={this.props.setPage.bind(this)}\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Card, Message, Button } from 'semantic-ui-react'\r\nimport Dora from '../contracts/Dora'\r\nimport truffleContract from \"truffle-contract\";\r\n\r\n\r\nclass AnswerItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { question: null, answer: null, contract: null, loading: false };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        const DoraContract = truffleContract(Dora)\r\n        DoraContract.setProvider(this.props.web3.currentProvider)\r\n        const contract = await DoraContract.at(this.props.contract)\r\n        this.setState({ contract })\r\n        const question = await contract.getSummary()\r\n        const answer = await contract.answers(this.props.answerIndex)\r\n        this.setState({ question, answer })\r\n\r\n    }\r\n\r\n    renderMessage() {\r\n        if (this.state.question[3].toNumber() === 1) {\r\n            return (<Message warning>Thanks! We'll let you know if your answer is picked as the best one.</Message>)\r\n        }\r\n        if (this.state.question[3].toNumber() === 2 && this.state.question[5].toString() === this.props.answerIndex.toString()) {\r\n            return (<Message success>Congratulations, your answer has been chosen! Please claim your reward.</Message>)\r\n        }\r\n        if (this.state.question[3].toNumber() === 2 && this.state.question[5].toString() !== this.props.answerIndex.toString()) {\r\n            return (<Message warning>Sorry, your answer has not been chosen!</Message>)\r\n        }\r\n        if (this.state.question[3].toNumber() === 3 && this.state.question[5].toString() === this.props.answerIndex.toString()) {\r\n            return (<Message success>The reward has been transferred to your account</Message>)\r\n        }\r\n\r\n    }\r\n\r\n    renderRedeem() {\r\n        if (this.state.question[3].toNumber() === 2 && this.state.question[5].toString() === this.props.answerIndex.toString()) {\r\n            return (<Card.Content>\r\n                        <Button loading={!!this.state.loading} color='green' onClick={this.redeem}>\r\n                            Transfer {parseFloat(this.props.web3.utils.fromWei(this.state.question[1].toString(), 'Ether'))\r\n                    .toFixed(2)} Ether to my account\r\n                        </Button>\r\n                    </Card.Content>)\r\n        }\r\n    }\r\n\r\n    redeem = async () => {\r\n        try {\r\n            this.setState({ loading: true})\r\n            await this.state.contract.withdrawReward({from: this.props.accounts[0]})\r\n\r\n            window.location.reload()\r\n        } catch (err) {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.question) {\r\n            return <div>Loading your answered question...</div>;\r\n        }\r\n        return (\r\n            <Card fluid>\r\n                <Card.Content>\r\n                    <Card.Header>{this.state.question[0]}</Card.Header>\r\n                    <Card.Meta>Reward: {parseFloat(this.props.web3.utils.fromWei(this.state.question[1].toString(), 'Ether'))\r\n                        .toFixed(2)} Ether</Card.Meta>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    <Card.Meta>Your answer:<br />{this.state.answer[0]}\r\n                    </Card.Meta>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    {this.renderMessage()}\r\n                </Card.Content>\r\n                    {this.renderRedeem()}\r\n            </Card>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AnswerItem;","import React, { Component } from 'react';\r\nimport { Divider, Card, Segment, Message } from 'semantic-ui-react'\r\nimport AnswerItem from './answer_item'\r\n\r\nclass MyAnswerList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._isMounted = false;\r\n        this.state = { log: null };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this._isMounted = true\r\n        this.updateLog()\r\n    }\r\n    \r\n    componentDidUpdate = async () => {\r\n        this._isMounted = true\r\n        this.updateLog()\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    updateLog = async () => {\r\n        var log = await this.props.contract.getPastEvents('QuestionAnswered',\r\n            { filter: { answerer: this.props.accounts[0]},\r\n                fromBlock: 0,\r\n                toBlock: 'latest'\r\n            })\r\n\r\n        log.sort((a,b) => b.blockNumber - a.blockNumber)\r\n        this._isMounted && this.setState({ log })\r\n     \r\n    }\r\n\r\n    renderMessage() {\r\n        if (this.state.log.length === 0) {\r\n            return (\r\n                <Segment>\r\n                <Message warning>You haven't answered any questions with this account.</Message>\r\n                </Segment>\r\n            )\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        if (!this.state.log) {\r\n            return <div>Loading your answered questions...</div>;\r\n          }\r\n\r\n        const questions = this.state.log.map((item) => {\r\n            return (\r\n            <AnswerItem\r\n                key={item.transactionHash}\r\n                contract={item.returnValues.dora}\r\n                web3={this.props.web3}\r\n                accounts={this.props.accounts}\r\n                answerIndex={item.returnValues.index}\r\n             />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div><Divider/>\r\n            <h2>Questions I have answered</h2>\r\n            <Card.Group>{questions}</Card.Group>\r\n            {this.renderMessage()}</div>    \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default MyAnswerList;","import React, { Component } from 'react';\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nclass PickWinner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { question: null,\r\n                         contract: null,\r\n                          answers: null,\r\n                            deadline: null,\r\n                             loading: false };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button loading={!!this.state.loading} color=\"green\" onClick={this.pickWinner}>\r\n            Best answer\r\n        </Button>)\r\n    }\r\n\r\n    pickWinner = async () => {\r\n        try {\r\n            this.setState({ loading: true})\r\n            await this.props.contract.pickWinner(this.props.answerIndex,{\r\n                from: this.props.accounts[0],\r\n            })\r\n\r\n            window.location.reload()\r\n        } catch (err) {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PickWinner;","import React, { Component } from 'react';\r\nimport { Card, Table, Message, Button } from 'semantic-ui-react'\r\nimport Dora from '../contracts/Dora'\r\nimport truffleContract from \"truffle-contract\"\r\nimport PickWinner from './pick_winner'\r\n\r\nclass MyQuestionItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { question: null,\r\n                         contract: null,\r\n                          answers: null,\r\n                            deadline: null,\r\n                             loading: false };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        const DoraContract = truffleContract(Dora)\r\n        DoraContract.setProvider(this.props.web3.currentProvider)\r\n        const contract = await DoraContract.at(this.props.contract)\r\n        const question = await contract.getSummary()\r\n        const deadline = new Date(question[2] * 1000)\r\n\r\n        const answers = await Promise.all(\r\n            Array(parseInt(question[4]))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return contract.answers(index)\r\n            })\r\n        );\r\n\r\n        this.setState({ question, contract, answers, deadline })\r\n\r\n    }\r\n\r\n    redeem = async () => {\r\n        try {\r\n            this.setState({ loading: true})\r\n            await this.state.contract.withdrawDepositReward({from: this.props.accounts[0]})\r\n            window.location.reload()\r\n        } catch (err) {\r\n            this.setState({ loading: false})\r\n            console.log(err)\r\n        }\r\n    }\r\n    \r\n\r\n    renderMessage() {\r\n        if (this.state.question[3].toNumber() === 2) {\r\n            return (<Message success>You picked a winner and your deposit is credited to your account</Message>)\r\n        }\r\n        if (this.state.deadline > Date.now()) {\r\n            return (<Message warning>You can pick the best answer after {this.state.deadline.toString()}.</Message>)\r\n        }\r\n        if (this.state.deadline < Date.now() && this.state.question[3].toNumber() === 1) {\r\n            return (<Message warning>Please pick a winner!</Message>)\r\n        }\r\n        if (this.state.deadline < Date.now() && this.state.question[3].toNumber() === 0) {\r\n            return (<div><Button color=\"green\" loading={!!this.state.loading} onClick={this.redeem}>Get a full refund</Button>\r\n                    <Message warning>{parseFloat(this.props.web3.utils.fromWei(this.state.question[1].toString(), 'Ether'))\r\n                    .toFixed(2)*1.1} Ether (reward and deposit) will be transferred back into your account.</Message>\r\n                    </div>)\r\n        }\r\n\r\n        if (this.state.deadline < Date.now() && this.state.question[3].toNumber() === 3) {\r\n            return  (<Message success>The reward and deposit has been transferred back into your account.</Message>)\r\n        }\r\n\r\n    }\r\n        \r\n    renderCell(index) {\r\n        if (this.state.deadline < Date.now() && this.state.question[3].toNumber() === 1) {\r\n            return (\r\n                <PickWinner\r\n                    answerIndex={index}\r\n                    contract={this.state.contract}\r\n                    accounts={this.props.accounts} />\r\n            )\r\n        }\r\n        if (this.state.deadline > Date.now()) {\r\n            return (\r\n                <Button disabled color=\"green\">\r\n                Best answer\r\n            </Button>)\r\n\r\n        }\r\n\r\n        if (this.state.question[3].toNumber() !== 1\r\n             && this.state.question[5].toString() === index.toString()) {\r\n            return (\r\n                <Message success>\r\n                Winner \r\n            </Message>)\r\n        }\r\n    }\r\n    \r\n    renderRows() {\r\n        if (this.state.answers.length >0) {\r\n            return this.state.answers.map((answer, index) => {\r\n                return (\r\n                <Table.Row key={index} >\r\n                    <Table.Cell>{answer[0]}</Table.Cell>\r\n                    <Table.Cell collapsing>\r\n                    {this.renderCell(index)}\r\n                </Table.Cell>\r\n                </Table.Row> )\r\n\r\n        })\r\n        } else {\r\n            return (\r\n                <Table.Row>\r\n                    <Table.Cell>Nobody has answered your question.</Table.Cell>\r\n                </Table.Row>\r\n            )\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        if (!this.state.question) {\r\n            return <div>Loading your asked question...</div>;\r\n          }\r\n        return (\r\n                <Card fluid>\r\n                    <Card.Content>\r\n                    <Card.Header>{this.state.question[0]}</Card.Header>\r\n                    <Card.Meta>Reward: {parseFloat(this.props.web3.utils.fromWei(this.state.question[1].toString(), 'Ether'))\r\n                                .toFixed(2)} Ether</Card.Meta>\r\n                    </Card.Content>\r\n                    <Card.Content>\r\n                    <Card.Header>Answers</Card.Header>\r\n                    <Table>\r\n                        <Table.Body>\r\n                            {this.renderRows()}\r\n                        </Table.Body>\r\n                    </Table>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                    {this.renderMessage()}\r\n                    </Card.Content>\r\n                </Card>  \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default MyQuestionItem;","import React, { Component } from 'react';\r\nimport { Divider, Card, Message, Segment } from 'semantic-ui-react'\r\nimport MyQuestionItem from './my_question_item'\r\n\r\nclass MyQuestionList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._isMounted = false;\r\n        this.state = { log: null };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        this._isMounted = true\r\n        this.updateLog()\r\n    }\r\n    \r\n    componentDidUpdate = async () => {\r\n        this.updateLog()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    updateLog = async () => {\r\n        var log = await this.props.contract.getPastEvents('QuestionAsked',\r\n            { filter: { asker: this.props.accounts[0]},\r\n                fromBlock: 0,\r\n                toBlock: 'latest'\r\n            })\r\n            \r\n        log.sort((a,b) => b.blockNumber - a.blockNumber);\r\n        this._isMounted && this.setState({ log })\r\n    }\r\n\r\n    renderMessage() {\r\n        if (this.state.log.length === 0) {\r\n            return (\r\n                <Segment>\r\n                <Message warning>You haven't asked any questions with this account.</Message>\r\n                </Segment>\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        if (!this.state.log) {\r\n            return <div>Loading your asked questions...</div>;\r\n          }\r\n\r\n        const questions = this.state.log.map((item) => {\r\n            return (\r\n            <MyQuestionItem\r\n                key={item.returnValues.dora}\r\n                contract={item.returnValues.dora}\r\n                web3={this.props.web3}\r\n                accounts={this.props.accounts}\r\n             />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div><Divider/>\r\n            <h2>Questions I have asked</h2>\r\n            <Card.Group>{questions}\r\n            </Card.Group>\r\n            {this.renderMessage()}\r\n            </div>    \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default MyQuestionList;","import React, { Component } from \"react\";\r\nimport DoraFactory from './contracts/DoraFactory'\r\nimport getWeb3 from \"./utils/getWeb3\";\r\nimport truffleContract from \"truffle-contract\";\r\nimport { Container, Menu } from 'semantic-ui-react'\r\nimport \"./App.css\";\r\nimport Home from './components/home'\r\nimport MyAnswerList from './components/my_answer_list'\r\nimport MyQuestionList from './components/my_question_list.'\r\n \r\nclass App extends Component {\r\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, activeItem: 'dora' }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  setPage(name) { this.setState({ activeItem: name }) }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const Contract = truffleContract(DoraFactory);\r\n      Contract.setProvider(web3.currentProvider);\r\n      const instance = await Contract.deployed();\r\n      \r\n      this.setState({ web3, accounts, contract: instance}, this.setEventMonitors);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  setEventMonitors = async () => {\r\n    window.ethereum.on('accountsChanged', this.changeAccount);\r\n  };\r\n\r\n  changeAccount = async (accounts) => {\r\n    console.log(\"Account change detected :\" + accounts);\r\n    this.setState({accounts});\r\n  };\r\n\r\n\r\n  renderPage() {\r\n    const { activeItem } = this.state\r\n    if (activeItem === 'dora')\r\n      return <Home\r\n      accounts={this.state.accounts}\r\n      web3={this.state.web3}\r\n      contract={this.state.contract}\r\n      setPage={this.setPage.bind(this)}\r\n      />\r\n    if (activeItem === 'myAnswers')\r\n      return <MyAnswerList\r\n      accounts={this.state.accounts}\r\n      web3={this.state.web3}\r\n      contract={this.state.contract}\r\n      />\r\n    if (activeItem === 'myQuestions')\r\n      return <MyQuestionList\r\n      accounts={this.state.accounts}\r\n      web3={this.state.web3}\r\n      contract={this.state.contract}\r\n      />  \r\n  }\r\n\r\n  render() {\r\n     if (!this.state.web3) {\r\n       return <div>Loading Web3, accounts, and contract...</div>\r\n     }\r\n\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <div className=\"App\">\r\n       <Container>\r\n       <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.0/dist/semantic.min.css\"></link>\r\n       <Menu>\r\n        <Menu.Item\r\n          name='dora'\r\n          active={activeItem === 'dora'}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          Dora\r\n        </Menu.Item>\r\n\r\n        <Menu.Item \r\n          name='myQuestions'\r\n          active={activeItem === 'myQuestions'}\r\n          onClick={this.handleItemClick}>\r\n          My questions\r\n        </Menu.Item>\r\n\r\n        <Menu.Item\r\n          name='myAnswers'\r\n          active={activeItem === 'myAnswers'}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          My answers\r\n        </Menu.Item>\r\n\r\n        <Menu.Menu position='right'>\r\n            <Menu.Item>\r\n                Your account: {this.state.accounts[0]}\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n      </Menu>\r\n     \r\n      {this.renderPage()}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}